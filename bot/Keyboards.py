from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton

"""
    –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Ç–∞–∫–∏—Ö –∫–∞–∫
    ReplyKeyboardMarkup –∏ InlineKeyboardMarkup, –∫–∞–∂–¥—ã–π –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ handlers.py 
"""
class BotKeyboards:

    def __init__(self):
        pass

    def welcome_keyboard(self) -> ReplyKeyboardMarkup:

        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
            [KeyboardButton("–ü–æ–º–æ—â—å")],
        ], resize_keyboard=True)

        return keyboard

    def registration(self, action) -> InlineKeyboardMarkup:

        if action == "Name":
            name_button = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–ò–º—è", callback_data="Name")
                    ]
                ]
            )
            return name_button

        if action == "Login":
            login_button = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–õ–æ–≥–∏–Ω", callback_data="Login")
                    ]
                ]
            )
            return login_button


    def profile(self) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ò–º—è", callback_data="change_name"),
                    InlineKeyboardButton("–õ–æ–≥–∏–Ω", callback_data="change_login"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_profile"),

                ]
            ]
        )

        return keyboard

    def main_menu(self) -> ReplyKeyboardMarkup:

        keyboard = ReplyKeyboardMarkup([

            [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")],
            [KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]

        ], resize_keyboard=True)

        return keyboard

    def create_task(self, action) -> InlineKeyboardMarkup:

        if action == "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞":
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–ò–º—è –∑–∞–¥–∞—á–∏", callback_data="task_name"),
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="Cancel_task_creating")
                    ]
                ]
            )
            return keyboard

        if action == "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏":
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", callback_data="task_description"),
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="Cancel_task_creating")
                    ]
                ]
            )
            return keyboard

        if action == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è":
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="task_accept"),
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="Cancel_task_creating")
                    ]
                ]
            )
            return keyboard

    def task_state(self) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="active_tasks")],
                [InlineKeyboardButton("–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="not_active_tasks")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_viewing")]
            ]

        )
        return keyboard

    def task_menu(self) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="task_menu")
                ]
            ]
        )

        return keyboard

    def task_viewer(self, tasks, slides, task_state) -> InlineKeyboardMarkup:

        buttons = [[InlineKeyboardButton(button[1], callback_data=f"–ó–∞–¥–∞—á–∞ {button[0]}")] for button in tasks]

        next_button = InlineKeyboardButton("¬ª", callback_data=f"¬ª{task_state}")

        previous_button = InlineKeyboardButton("¬´", callback_data=f"¬´{task_state}")

        task_menu = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="task_menu")

        if slides == "no_pages":

            buttons.append([task_menu])

        elif slides == "first_page":

            buttons.append([task_menu, next_button])

        elif slides == "last_page":

            buttons.append([previous_button, task_menu])

        else:

            buttons.append([previous_button, task_menu, next_button])

        keyboard = InlineKeyboardMarkup(buttons)

        return keyboard

    def task_info(self, task_id) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete {task_id}"),
                    InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Åüìù", callback_data=f"change_state {task_id}")
                ],
                [
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_from_task_info"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_from_task_info")
                ]
            ]
        )

        return keyboard
