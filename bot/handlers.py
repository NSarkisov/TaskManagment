from file_manager import texts_dict, buffer
from pyrogram import Client, types
import Keyboards
import Fsm

"""
    –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ file_manager –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä—ë–º –∏ –±—É—Ñ–µ—Ä–æ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
    —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–∑ pyrogram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç –∏ —Ç–∏–ø—ã, –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ Keyboards –∏ Fsm,
    –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ MessageHandlers, CallbackQueryHandler –∏ —Ñ—É–Ω–∫—Ü–∏—é task_view 
"""


async def task_view(bot: Client, telegram_id, column, task_state):
    """
        –í —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç, id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º, –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å–ª–∞–π–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏,
        –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º(–≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞) —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        –∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø –ø–æ 5 –∑–∞–¥–∞—á, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø–µ,
        –ª–æ–≥–∏–∫–∞ —Å–ª–∞–π–¥–æ–≤ –∏ –≤—ã–±–æ—Ä –∑–∞–¥–∞—á –≤ —Å–ª–∞–π–¥, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –µ–≥–æ id –≤ –±—É—Ñ–µ—Ä
    """
    tasks = bot_db.get_tasks_id_name_on_state(task_state, telegram_id)
    groups = (len(tasks) + 4) // 5
    last_group = len(tasks) - (len(tasks) % 5)
    slide = None
    tasks_list = None

    if column == 0 and groups == 1:
        slide = "no_pages"
        tasks_list = tasks[:5]

    elif column == 0 and groups > 1:
        slide = "first_page"
        tasks_list = tasks[:5]

    elif column == groups - 1 and groups > 1:
        slide = "last_page"
        tasks_list = tasks[last_group:]

    elif groups != column:
        slide = "last_page"
        tasks_list = tasks[column * 5:(column + 1) * 5]

    keyboard = bot_keyboards.task_viewer(tasks_list, slide, task_state)
    message_for_edit = await bot.edit_message_text(telegram_id, buffer["messages_for_edit"][telegram_id],
                                                   "üìù–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—áüìù : ", reply_markup=keyboard)
    buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})


async def start(bot: Client, message: types.Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏—è,
        –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞ –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ
        —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    """
    telegram_id, telegram_link = message.from_user.id, "@" + message.from_user.username
    user_exists = bot_db.searching_user(telegram_id)

    if not user_exists:
        bot_db.add_user(telegram_id, telegram_link)
        registration_keyboard = bot_keyboards.welcome_keyboard()
        await bot.send_message(message.chat.id, ''.join(texts_dict['/start']),
                               reply_markup=registration_keyboard)

    else:
        user_login = bot_db.get_login(telegram_id)
        main_menu_keyboard = bot_keyboards.main_menu()
        greetings_text = (f"{texts_dict['for_registered'][0]} <b><i>{user_login}</i></b>"
                          f"\n{texts_dict['for_registered'][1]}")
        await bot.send_message(message.chat.id, greetings_text, reply_markup=main_menu_keyboard)


async def registration(bot: Client, message: types.Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π,
        —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–≤–æ–ª—å–Ω–æ –±–∞–∑–æ–≤—ã–π, –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    telegram_id = message.from_user.id
    if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        registration_keyboard = bot_keyboards.registration("Name")
        message_for_edit = await bot.send_message(message.chat.id, ''.join(texts_dict['Registration']),
                                                  reply_markup=registration_keyboard)
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})
    if message.text == "–ü–æ–º–æ—â—å$":
        print("")  # TO DO


async def create_task(bot: Client, message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –∫ –±–¥,
    —Ç–∞–∫–∏–µ-–∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–¥ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,
    —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π,
    —Å –∑–∞–ø–∏—Å—å—é id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –±—É—Ñ—Ñ–µ—Ä
    """

    telegram_id = message.from_user.id
    user_exists = bot_db.searching_user(telegram_id)
    check_state = bot_fsm.check_state(telegram_id) if user_exists else None

    if telegram_id in buffer["messages_for_edit"].keys():
        await bot.delete_messages(telegram_id, buffer["messages_for_edit"][telegram_id])

    if check_state == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω":
        keyboard = bot_keyboards.create_task("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

        message_for_edit = await bot.send_message(message.chat.id,
                                                  ''.join(texts_dict["Task_create"]),
                                                  reply_markup=keyboard)

        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})


async def task_overview(bot: Client, message: types.Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á", –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏—è,
        –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–¥: –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        –∑–∞–¥–∞—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        –±–æ—Ç–æ–º –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –±–¥.
    """
    telegram_id = message.from_user.id
    user_exists = bot_db.searching_user(telegram_id)
    check_state = bot_fsm.check_state(telegram_id) if user_exists else None

    if telegram_id in buffer["messages_for_edit"].keys():
        await bot.delete_messages(telegram_id, buffer["messages_for_edit"][telegram_id])

    if check_state == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" and message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á":
        tasks_in_db = bot_db.find_tasks(telegram_id)
        keyboard = bot_keyboards.task_state()

        if tasks_in_db:
            message_for_edit = await bot.send_message(message.chat.id,
                                                      texts_dict["Task_view"][1], reply_markup=keyboard)
            buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})
        else:
            await bot.send_message(message.chat.id, texts_dict["Task_view"][0])


async def profile(bot: Client, message: types.Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ message,
        –∑–∞–ø—Ä–æ—Å—ã –∫ –±–¥ user_exists, check_state –∫–∞–∫ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö,
        —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
        –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ,
        –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—á–µ–Ω—å –±–∞–∑–æ–≤–∞—è, –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """

    telegram_id = message.from_user.id
    user_exists = bot_db.searching_user(telegram_id)
    check_state = bot_fsm.check_state(telegram_id) if user_exists else None

    if telegram_id in buffer["messages_for_edit"].keys():
        await bot.delete_messages(telegram_id, buffer["messages_for_edit"][telegram_id])

    if check_state == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω":
        info = bot_db.get_name_login(telegram_id)
        name, login = info[0], info[1]

        profile_text = (f"{texts_dict['Profile'][0]}\n\n–í–∞—à–µ –∏–º—è: <b><i>{name}</i></b>\n\n"
                        f"–í–∞—à –ª–æ–≥–∏–Ω: <b><i>{login}</i></b>\n\n{texts_dict['Profile'][0]}")

        keyboard = bot_keyboards.profile()

        message_for_edit = await bot.send_message(telegram_id, profile_text, reply_markup=keyboard)

        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})


async def text(bot: Client, message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö,
    –∫–∞–∫ –∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ message –∏ –±–¥, —Ç–∞–∫-–∂–µ –∑–∞–ø—Ä–æ—Å
    –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫ –±–¥.
    """

    telegram_id = message.from_user.id
    user_exists = bot_db.searching_user(telegram_id)
    check_state = bot_fsm.check_state(telegram_id) if user_exists else None
    check_task_process = bot_fsm.check_task_state(telegram_id) if check_state else None

    if check_state == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        registration_keyboard = bot_keyboards.registration("Name")

        await bot.delete_messages(message.chat.id, buffer["messages_for_edit"][telegram_id])

        message_for_edit = await bot.send_message(message.chat.id, ''.join(texts_dict['Registration']),
                                                  reply_markup=registration_keyboard)

        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})

    if check_state == "–í–≤–æ–¥ –∏–º–µ–Ω–∏":

        login_button = bot_keyboards.registration("Login")
        user_name = bot_db.get_name(telegram_id)

        if user_name is None:
            bot_db.write_name(message.text, telegram_id)
            message_for_edit = await bot.send_message(message.chat.id,
                                                      f"–û—Ç–ª–∏—á–Ω–æ {message.text}!\n" + texts_dict['Login'],
                                                      reply_markup=login_button
                                                      )
        else:
            await bot.delete_messages(message.chat.id, buffer["messages_for_edit"][telegram_id])
            message_for_edit = await bot.send_message(message.chat.id,
                                                      f"–û—Ç–ª–∏—á–Ω–æ {user_name}!\n" + texts_dict['Login'],
                                                      reply_markup=login_button
                                                      )
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})

    if check_state == "–í–≤–æ–¥ –õ–æ–≥–∏–Ω–∞":
        bot_db.login_write(message.text, telegram_id)
        bot_fsm.users_state_update("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", telegram_id)
        user_name = bot_db.get_name(telegram_id)
        menu_keyboard = bot_keyboards.main_menu()
        await bot.send_message(message.chat.id,
                               texts_dict["Welcome"][0] + " " + user_name + "!\n" + ''.join(
                                   texts_dict["Welcome"][1:]),
                               reply_markup=menu_keyboard)

    if check_state == "–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏":
        login = bot_db.get_login(telegram_id)
        bot_db.write_name(message.text, telegram_id)
        profile_text = (f"{texts_dict['Profile'][0]}\n\n–í–∞—à–µ –∏–º—è: <b><i>{message.text}</i></b>\n\n"
                        f"–í–∞—à –ª–æ–≥–∏–Ω: <b><i>{login}</i></b>\n\n{texts_dict['Profile'][0]}")
        keyboard = bot_keyboards.profile()
        message_for_edit = await bot.send_message(telegram_id, profile_text, reply_markup=keyboard)
        bot_fsm.users_state_update("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", telegram_id)
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})

    if check_state == "–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞":
        bot_db.login_write(message.text, telegram_id)
        name = bot_db.get_name(telegram_id)
        profile_text = (f"{texts_dict['Profile'][0]}\n\n–í–∞—à–µ –∏–º—è: <b><i>{name}</i></b>\n\n"
                        f"–í–∞—à –ª–æ–≥–∏–Ω: <b><i>{message.text}</i></b>\n\n{texts_dict['Profile'][0]}")
        keyboard = bot_keyboards.profile()
        message_for_edit = await bot.send_message(telegram_id, profile_text, reply_markup=keyboard)
        bot_fsm.users_state_update("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", telegram_id)
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})

    if check_task_process == "–í–≤–æ–¥ –∏–º–µ–Ω–∏":
        user_id = bot_db.get_id(telegram_id)
        keyboard = bot_keyboards.create_task("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        message_for_edit = await bot.send_message(message.chat.id,
                                                  texts_dict["Task_name"][0] + message.text +
                                                  ''.join(texts_dict["Task_name"][1:]),
                                                  reply_markup=keyboard)
        buffer["creating_task"].update({telegram_id: [user_id, message.text]})
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})

    if check_task_process == "–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è":
        bot_fsm.users_task_status_update("–ù–µ —Å–æ–∑–¥–∞—ë—Ç", telegram_id)
        task_name = buffer["creating_task"][telegram_id][1]
        task_description = message.text
        keyboard = bot_keyboards.create_task("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        buffer["creating_task"][telegram_id].append(message.text)
        message_for_edit = await bot.send_message(message.chat.id,
                                                  texts_dict["Check_Task"][0] + task_name + "\n" + task_description
                                                  + "\n" + texts_dict["Check_Task"][1],
                                                  reply_markup=keyboard)
        buffer["messages_for_edit"].update({telegram_id: message_for_edit.id})


async def callback_query(bot: Client, call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data –≤ InlineKeyboardMarkup, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—É—Ç—ë–º —Å–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–º–µ–Ω–∏ inline
    –∫–Ω–æ–ø–æ–∫, –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ if, –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–≤–æ—è –ª–æ–≥–∏–∫–∞.
    """

    chat_id = call.message.chat.id
    button_name = call.data

    if button_name == "Name":
        bot_fsm.users_state_update("–í–≤–æ–¥ –∏–º–µ–Ω–∏", chat_id)
        message_for_edit = await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                                       "–í–≤–µ–¥–∏—Ç–µ –ò–º—è:", reply_markup=None)
        buffer["messages_for_edit"].update({chat_id: message_for_edit.id})

    if button_name == "Login":
        bot_fsm.users_state_update("–í–≤–æ–¥ –õ–æ–≥–∏–Ω–∞", chat_id)
        message_for_edit = await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                                       "–í–≤–µ–¥–∏—Ç–µ –õ–æ–≥–∏–Ω:", reply_markup=None)
        buffer["messages_for_edit"].update({chat_id: message_for_edit.id})

    if button_name == "change_name":
        bot_fsm.users_state_update("–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏", chat_id)
        await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ",
                                    reply_markup=None)

    if button_name == "change_login":
        bot_fsm.users_state_update("–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞", chat_id)
        await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω: ",
                                    reply_markup=None)

    if button_name == "cancel_profile":
        await bot.delete_messages(chat_id, buffer["messages_for_edit"][chat_id])

    if button_name == "task_name":
        bot_fsm.users_task_status_update("–í–≤–æ–¥ –∏–º–µ–Ω–∏", chat_id)
        await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")

    if button_name == "task_description":
        bot_fsm.users_task_status_update("–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è", chat_id)
        await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")

    if button_name == "task_accept":
        user_id = buffer["creating_task"][chat_id][0]
        task_name = buffer["creating_task"][chat_id][1]
        task_description = buffer["creating_task"][chat_id][2]
        bot_db.create_task(user_id, task_name, task_description)
        buffer["creating_task"].pop(chat_id)
        await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                    f"–í–∞—à–∞ –∑–∞–¥–∞ {task_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n"
                                    f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º –º–µ–Ω—é '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á'")

    if button_name == "Cancel_task_creating":

        bot_fsm.users_task_status_update("–ù–µ —Å–æ–∑–¥–∞—ë—Ç", chat_id)
        if chat_id in buffer["creating_task"].keys():
            buffer["creating_task"].pop(chat_id)
        await bot.delete_messages(chat_id, buffer["messages_for_edit"][chat_id])

    if button_name == "active_tasks":

        tasks = bot_db.get_tasks_id_name_on_state("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", chat_id)
        print(tasks)

        if tasks:
            buffer["task_groups"].update({chat_id: {"active_slide": 0, "task_state": "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}})
            await task_view(bot, chat_id, column=0, task_state="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        else:
            state_text = f"{texts_dict['tasks_left'][0]} –∞–∫—Ç–∏–≤–Ω—ã—Ö {texts_dict['tasks_left'][1]}"
            keyboard = bot_keyboards.task_menu()
            await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                        state_text, reply_markup=keyboard)

    if button_name == "not_active_tasks":

        tasks = bot_db.get_tasks_id_name_on_state("–í—ã–ø–æ–ª–Ω–µ–Ω–∞", chat_id)

        if tasks:
            buffer["task_groups"].update({chat_id: {"active_slide": 0, "task_state": "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"}})
            await task_view(bot, chat_id, column=0, task_state="–í—ã–ø–æ–ª–Ω–µ–Ω–∞")

        else:
            state_text = f"{texts_dict['tasks_left'][0]} –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö {texts_dict['tasks_left'][1]}"
            keyboard = bot_keyboards.task_menu()
            await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                        state_text, reply_markup=keyboard)

    if button_name == "task_menu":
        keyboard = bot_keyboards.task_state()
        message_for_edit = await bot.edit_message_text(chat_id,
                                                       buffer["messages_for_edit"][chat_id],
                                                       texts_dict["Task_view"][1],
                                                       reply_markup=keyboard)
        buffer["messages_for_edit"].update({chat_id: message_for_edit.id})

    if button_name.startswith("¬ª"):
        task_state = button_name[1:]
        buffer["task_groups"][chat_id]["active_slide"] += 1
        column = buffer["task_groups"][chat_id]["active_slide"]
        await task_view(bot, chat_id, column=column, task_state=task_state)

    if button_name.startswith("¬´"):
        task_state = button_name[1:]
        buffer["task_groups"][chat_id]["active_slide"] -= 1
        column = buffer["task_groups"][chat_id]["active_slide"]
        await task_view(bot, chat_id, column=column, task_state=task_state)

    if button_name == "cancel_viewing":
        await bot.delete_messages(chat_id, buffer["messages_for_edit"][chat_id])

    if button_name.startswith("–ó–∞–¥–∞—á–∞"):
        task_id = button_name[7:]
        task_info = bot_db.get_task_info(task_id)
        task_name, task_description = task_info[0], task_info[1]
        active_text, inactive_state = texts_dict['task_info'][0], texts_dict['task_info'][1]
        task_state = active_text if buffer["task_groups"][chat_id]["task_state"] == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else inactive_state
        task_text = (f"{task_state}<b><i>{task_name}</b></i>\n\n"
                     f"<b>{task_description}</b>\n\n{texts_dict['task_info'][2]}")
        keyboard = bot_keyboards.task_info(task_id)
        message_for_edit = await bot.edit_message_text(chat_id,
                                                       buffer["messages_for_edit"][chat_id],
                                                       text=task_text,
                                                       reply_markup=keyboard)
        buffer["messages_for_edit"].update({chat_id: message_for_edit.id})

    if button_name == "back_from_task_info":
        active_slide = buffer["task_groups"][chat_id]['active_slide']
        task_state = buffer["task_groups"][chat_id]['task_state']
        await task_view(bot, chat_id, column=active_slide, task_state=task_state)

    if button_name == "cancel_from_task_info":
        await bot.delete_messages(chat_id, buffer["messages_for_edit"][chat_id])
        buffer["task_groups"].pop(chat_id)

    if button_name.startswith("delete"):

        task_id = button_name[7:]
        task_state = buffer["task_groups"][chat_id]["task_state"]
        status_text = "–∞–∫—Ç–∏–≤–Ω—ã—Ö" if task_state == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else "–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        task_name = bot_db.get_task_name(task_id)
        bot_db.delete_task(task_id)
        task_left = bot_db.get_tasks_id_name_on_state(task_state, chat_id)
        await bot.answer_callback_query(call.id, f"–ó–∞–¥–∞—á–∞ {task_name} —É–¥–∞–ª–µ–Ω–∞")

        if task_left:
            await task_view(bot, chat_id, column=0, task_state=task_state)

        else:
            state_text = f"{texts_dict['tasks_left'][0]} {status_text} {texts_dict['tasks_left'][1]}"
            keyboard = bot_keyboards.task_menu()
            await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                        state_text, reply_markup=keyboard)

    if button_name.startswith("change_state"):

        task_id = button_name[13:]
        name_and_state = bot_db.get_task_name_state(task_id)
        task_name, task_state = name_and_state[0], name_and_state[1]
        status_text = "–∞–∫—Ç–∏–≤–Ω—ã—Ö" if task_state == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else "–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö"

        if task_state == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
            new_state = f"–ó–∞–¥–∞—á–∞ {task_name} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
            bot_fsm.task_state_update("–í—ã–ø–æ–ª–Ω–µ–Ω–∞", task_id)
        else:
            new_state = f"–ó–∞–¥–∞—á–∞ {task_name} –∞–∫—Ç–∏–≤–Ω–∞"
            bot_fsm.task_state_update("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", task_id)

        task_left = bot_db.get_tasks_id_name_on_state(task_state, chat_id)
        await bot.answer_callback_query(call.id, new_state)

        if task_left:
            await task_view(bot, chat_id, column=0, task_state=task_state)
        else:
            state_text = f"{texts_dict['tasks_left'][0]} {status_text} {texts_dict['tasks_left'][1]}"
            keyboard = bot_keyboards.task_menu()
            await bot.edit_message_text(chat_id, buffer["messages_for_edit"][chat_id],
                                        state_text, reply_markup=keyboard)


"""
    –°–æ–∑–¥–∞–Ω–∏–µ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, —Ç–∞–∫–∏–µ –∫–∞–∫:
    - –∏–∑ —Ñ–∞–π–ª–∞ Keyboards –∫–ª–∞—Å—Å BotKeyboards, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
    - 2 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –±–¥.
"""
bot_keyboards = Keyboards.BotKeyboards()
bot_fsm = Fsm.FSM()
bot_db = Fsm.DB()
